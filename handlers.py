import re
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
import requests
from transliterate import translit
from database import add_station, get_stations, delete_station, add_message, get_message_id, delete_message_id
from config import API_KEY
from telegram.error import BadRequest
from datetime import datetime, timedelta
import pytz

# Configure logging
logging.basicConfig(filename='bot.log', level=logging.INFO,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

def log_action(user, action, extra_info=""):
    if extra_info:
        logging.info(f"User: {user.id} - {user.username} - {user.full_name} | Action: {action} ({extra_info})")
    else:
        logging.info(f"User: {user.id} - {user.username} - {user.full_name} | Action: {action}")

def start(update: Update, context: CallbackContext):
    user = update.message.from_user
    log_action(user, "start", "Bot started")

    delete_message_id(user.id)  # Ensure the old message ID is deleted
    stations = get_stations(user.id)

    if stations:
        message = context.bot.send_message(
            chat_id=user.id,
            text="üöå –ö—É–¥–∞ –ø–æ–µ–¥–µ–º —Å–µ–≥–æ–¥–Ω—è?",
            reply_markup=main_menu_keyboard(user.id)
        )
    else:
        message = context.bot.send_message(
            chat_id=user.id,
            text="üëã <b>–ì–∞–º–∞—Ä–¥–∂–æ–±–∞!</b>\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (—á–µ—Ç—ã—Ä–µ —Ü–∏—Ñ—Ä—ã –ø–æ—Å–ª–µ <code>ID</code> –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–º —Ç–∞–±–ª–æ –∞–≤—Ç–æ–±—É—Å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏) –∏ —è –ø–æ–∫–∞–∂—É, —á—Ç–æ —Å–µ–π—á–∞—Å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–æ–º —Ç–∞–±–ª–æ.\n\n–ë–æ—Ç–æ–º –±—É–¥–µ—Ç —É–¥–æ–±–Ω–µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è, –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–≤—Ç–æ–±—É—Å–Ω—ã–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ —Ç–æ, –∫–∞–∫ —Ö–æ—á–µ—à—å –µ—ë –Ω–∞–∑–≤–∞—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä, <code>3855 –ú–µ—Ç—Ä–æ ¬´–ú–∞—Ä–¥–∂–∞–Ω–∏—à–≤–∏–ª–∏¬ª</code>",
            parse_mode='HTML'
        )

    add_message(user.id, message.message_id)
    context.bot.delete_message(chat_id=user.id, message_id=update.message.message_id)

def handle_message(update: Update, context: CallbackContext):
    user = update.message.from_user
    text = update.message.text
    log_action(user, "handle_message", text)

    context.bot.delete_message(chat_id=user.id, message_id=update.message.message_id)

    if ' ' in text:
        stop_number, stop_name = text.split(' ', 1)
        add_station(user.id, stop_number, stop_name)
        response_text = f'‚úÖ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ ¬´{stop_name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ ¬´–ú–æ–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏¬ª'
        reply_markup = main_menu_keyboard(user.id)
    else:
        stop_number = text
        response_text = get_schedule(stop_number)
        reply_markup = schedule_keyboard(stop_number)

    previous_message_id = get_message_id(user.id)
    if previous_message_id:
        try:
            context.bot.edit_message_text(
                text=response_text,
                chat_id=user.id,
                message_id=previous_message_id[0],
                parse_mode='HTML',
                reply_markup=reply_markup
            )
        except BadRequest as e:
            if "Message is not modified" in str(e):
                pass
    else:
        message = context.bot.send_message(
            chat_id=user.id,
            text=response_text,
            parse_mode='HTML',
            reply_markup=reply_markup
        )
        add_message(user.id, message.message_id)

def get_schedule(stop_number):
    url = f'https://transit.ttc.com.ge/pis-gateway/api/v2/stops/1:{stop_number}/arrival-times?locale=en&ignoreScheduledArrivalTimes=false'
    headers = {'X-api-key': API_KEY}
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        buses = response.json()
        if not buses:
            return "‚òïÔ∏è <b>–í—Å–µ –∞–≤—Ç–æ–±—É—Å—ã —É–µ—Ö–∞–ª–∏</b>\n\n–ò–ª–∏ —Ç–∞–±–ª–æ —Å —Ç–∞–∫–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."

        schedule = ""
        tz = pytz.timezone('Asia/Tbilisi')
        now = datetime.now(tz)
        for bus in buses:
            route = bus['shortName']
            headsign = translit(bus['headsign'], 'ka', reversed=True).title()
            headsign = re.sub(r'(\s-\s|¬´-|-¬ª|-\s|-\b|\b-)', ' ‚Üí ', headsign)
            headsign = re.sub(r'""(.*?)""', r'¬´\1¬ª', headsign)
            headsign = re.sub(r"''(.*?)''", r'¬´\1¬ª', headsign)
            headsign = re.sub(r'"(.*?)"', r'¬´\1¬ª', headsign)
            headsign = re.sub(r'‚Äú(.*?)‚Äù', r'¬´\1¬ª', headsign)
            headsign = re.sub(r'‚Äò(.*?)‚Äô', r'¬´\1¬ª', headsign)
            headsign = re.sub(r'¬ª(.*?)¬´', r'¬´\1¬ª', headsign)
            headsign = re.sub(r'¬ª(.*?)¬ª', r'¬´\1¬ª', headsign)
            headsign = re.sub(r'¬´(.*?)¬ª', r'¬´\1¬ª', headsign)
            time = bus['realtimeArrivalMinutes']
            arrival_time = now + timedelta(minutes=time)
            arrival_time_str = arrival_time.strftime("%H:%M")
            color = "üü¢" if time > 5 else "üü°" if time > 1 else "üî•"
            schedule += f"<code>{arrival_time_str}</code> {color} <code>{route}</code> <b>{headsign}</b> —á–µ—Ä–µ–∑ <b>{time} –º–∏–Ω.</b>\n"
            #schedule += f"<code>{route}</code> {color} <b>{headsign}</b> —á–µ—Ä–µ–∑ <b>{time} –º–∏–Ω.</b>\n"
        return schedule
    else:
        return "üëÄ –ß—Ç–æ-—Ç–æ –ø–æ–ª–æ–º–∞–ª–æ—Å—å, –ø–æ—Ö–æ–∂–µ. –ù–∞–ø–∏—à–∏—Ç–µ <code>contact@renecoignard.com</code>, –µ—Å–ª–∏ –Ω–µ –ø–æ—á–∏–Ω–∏—Ç—Å—è —Å–∞–º–æ"

def show_help(update: Update, context: CallbackContext):
    user = update.callback_query.message.chat
    log_action(user, "show_help")

    help_text = "<b>–ì–¥–µ –Ω–∞–π—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b>\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (—á–µ—Ç—ã—Ä–µ —Ü–∏—Ñ—Ä—ã –ø–æ—Å–ª–µ <code>ID</code> –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–º —Ç–∞–±–ª–æ –∞–≤—Ç–æ–±—É—Å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏) –∏ —è –ø–æ–∫–∞–∂—É, —á—Ç–æ —Å–µ–π—á–∞—Å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–æ–º —Ç–∞–±–ª–æ.\n\n<b>–ö–∞–∫ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫—É</b>\n–ë–æ—Ç–æ–º –±—É–¥–µ—Ç —É–¥–æ–±–Ω–µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è, –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–≤—Ç–æ–±—É—Å–Ω—ã–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ —Ç–æ, –∫–∞–∫ —Ö–æ—á–µ—à—å –µ—ë –Ω–∞–∑–≤–∞—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä, <code>3855 –ú–µ—Ç—Ä–æ ¬´–ú–∞—Ä–¥–∂–∞–Ω–∏—à–≤–∏–ª–∏¬ª</code>\n\n<b>–ö–∞–∫ —É–¥–∞–ª–∏—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫—É</b>\n–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫—É, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –º–µ–Ω—é ¬´–ú–æ–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏¬ª.\n\n<b>–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã</b>\nüî• –ê–≤—Ç–æ–±—É—Å —É–µ–¥–µ—Ç –º–µ–Ω—å—à–µ —á–µ–º —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É\nüü° –ê–≤—Ç–æ–±—É—Å —Å–∫–æ—Ä–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è (–æ—Ç 2 –¥–æ 5 –º–∏–Ω—É—Ç)\nüü¢ –ê–≤—Ç–æ–±—É—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –±–æ–ª—å—à–µ —á–µ–º —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç\n\n<b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</b>\n–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ: <code>contact@renecoignard.com</code>"
    query = update.callback_query

    previous_message_id = get_message_id(user.id)
    if previous_message_id:
        context.bot.edit_message_text(
            text=help_text,
            chat_id=user.id,
            message_id=previous_message_id[0],
            reply_markup=help_keyboard_with_back(),
            parse_mode="HTML"
        )
    else:
        message = context.bot.send_message(
            chat_id=user.id,
            text=help_text,
            reply_markup=help_keyboard_with_back(),
            parse_mode="HTML"
        )
        add_message(user.id, message.message_id)
    query.answer()

def show_my_stations(update: Update, context: CallbackContext):
    user = update.callback_query.message.chat
    log_action(user, "show_my_stations")

    stations = get_stations(user.id)
    if (stations):
        keyboard = [[InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å: {stop_name}", callback_data=f"remove_{stop_number}")] for stop_number, stop_name in stations]
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        text = "–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:"
    else:
        reply_markup = main_menu_keyboard(user.id)
        text = "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ ¬Ø\\_(„ÉÑ)_/¬Ø"

    previous_message_id = get_message_id(user.id)
    if previous_message_id:
        context.bot.edit_message_text(
            text=text,
            chat_id=user.id,
            message_id=previous_message_id[0],
            reply_markup=reply_markup
        )
    else:
        message = context.bot.send_message(
            chat_id=user.id,
            text=text,
            reply_markup=reply_markup
        )
        add_message(user.id, message.message_id)
    update.callback_query.answer()

def show_schedule(update: Update, context: CallbackContext):
    user = update.callback_query.message.chat
    log_action(user, "show_schedule")

    stations = get_stations(user.id)
    if (stations):
        keyboard = [[InlineKeyboardButton(f"{stop_name}", callback_data=f"schedule_{stop_number}")] for stop_number, stop_name in stations]
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        text = "–í—ã–±–µ—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫—É:"
    else:
        reply_markup = main_menu_keyboard(user.id)
        text = "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ ¬Ø\\_(„ÉÑ)_/¬Ø"

    previous_message_id = get_message_id(user.id)
    if previous_message_id:
        context.bot.edit_message_text(
            text=text,
            chat_id=user.id,
            message_id=previous_message_id[0],
            reply_markup=reply_markup
        )
    else:
        message = context.bot.send_message(
            chat_id=user.id,
            text=text,
            reply_markup=reply_markup
        )
        add_message(user.id, message.message_id)
    update.callback_query.answer()

def show_schedule_for_station(update: Update, context: CallbackContext, stop_number: str):
    user = update.callback_query.message.chat
    log_action(user, "show_schedule_for_station", stop_number)

    schedule_text = get_schedule(stop_number)
    keyboard = [
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_schedule"), InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh_{stop_number}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    previous_message_id = get_message_id(update.callback_query.message.chat_id)
    if previous_message_id:
        try:
            context.bot.edit_message_text(
                text=schedule_text,
                chat_id=update.callback_query.message.chat_id,
                message_id=previous_message_id[0],
                parse_mode='HTML',
                reply_markup=reply_markup
            )
        except BadRequest as e:
            if "Message is not modified" in str(e):
                pass
    else:
        message = context.bot.send_message(
            chat_id=update.callback_query.message.chat_id,
            text=schedule_text,
            parse_mode='HTML',
            reply_markup=reply_markup
        )
        add_message(update.callback_query.message.chat_id, message.message_id)

def button_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    user = query.message.chat
    log_action(user, "button_callback", query.data)

    previous_message_id = get_message_id(user.id)  # Move this outside the conditional blocks
    if query.data == "back":
        if previous_message_id:
            context.bot.edit_message_text(
                text="üöå –ö—É–¥–∞ –ø–æ–µ–¥–µ–º —Å–µ–≥–æ–¥–Ω—è?",
                chat_id=user.id,
                message_id=previous_message_id[0],
                reply_markup=main_menu_keyboard(user.id),
                parse_mode='HTML'
            )
    elif query.data.startswith("remove_"):
        stop_number = query.data.split("_")[1]
        delete_station(user.id, stop_number)
        stations = get_stations(user.id)
        if stations:
            show_my_stations(update, context)
        else:
            context.bot.edit_message_text(
                text="–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ ¬Ø\\_(„ÉÑ)_/¬Ø",
                chat_id=user.id,
                message_id=previous_message_id[0],
                reply_markup=main_menu_keyboard(user.id)
            )
    elif query.data == "schedule":
        show_schedule(update, context)
    elif query.data == "help":
        show_help(update, context)
    elif query.data == "my_stations":
        show_my_stations(update, context)
    elif query.data.startswith("schedule_"):
        stop_number = query.data.split("_")[1]
        show_schedule_for_station(update, context, stop_number)
    elif query.data.startswith("refresh_"):
        stop_number = query.data.split("_")[1]
        show_schedule_for_station(update, context, stop_number)
    elif query.data == "back_to_schedule":
        show_schedule(update, context)
    query.answer()

def main_menu_keyboard(user_id):
    stations = get_stations(user_id)
    if stations:
        keyboard = [
            [InlineKeyboardButton("üïí –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data='schedule'), InlineKeyboardButton("üõü –ü–æ–º–æ—â—å", callback_data='help')],
            [InlineKeyboardButton("‚≠êÔ∏è –ú–æ–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏", callback_data='my_stations')]
        ]
    else:
        keyboard = [
            [InlineKeyboardButton("üõü –ü–æ–º–æ—â—å", callback_data='help')]
        ]
    return InlineKeyboardMarkup(keyboard)

def schedule_keyboard(stop_number):
    keyboard = [
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_schedule"), InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh_{stop_number}")]
    ]
    return InlineKeyboardMarkup(keyboard)

def help_keyboard_with_back():
    keyboard = [
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back')]
    ]
    return InlineKeyboardMarkup(keyboard)
